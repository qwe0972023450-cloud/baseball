(function(){
const STORAGE='bbt_v5_save';
const $=id=>document.getElementById(id);
const rand=(a,b)=>Math.floor(Math.random()*(b-a+1))+a;
const clamp=(x,a,b)=>Math.max(a,Math.min(b,x));
const N=['Lin','Chen','Wang','Liu','Huang','Suzuki','Tanaka','Sato','Kim','Park','Lee','Smith','Perez','Garcia','Brown','Johnson','Lopez','Martinez','Davis','Clark'];
const rname=()=>N[Math.floor(Math.random()*N.length)]+' '+String.fromCharCode(65+rand(0,25));
const ASSETS={'mlb-lad':'/static/assets/logo_lad.svg','mlb-nyy':'/static/assets/logo_nyy.svg','npb-han':'/static/assets/logo_han.svg','kbo-ktw':'/static/assets/logo_ktw.svg','cpbl-ctbc':'/static/assets/logo_ctbc.svg'};

const LEAGUES={
  mlb:{name:'MLB',games:162,dh:true,playoffs:'12-team simplified',teams:[{id:'mlb-lad',name:'Dodgers'},{id:'mlb-nyy',name:'Yankees'}]},
  npb:{name:'NPB',games:143,dh:true,playoffs:'Climax simplified',teams:[{id:'npb-han',name:'Hanshin Tigers'}]},
  kbo:{name:'KBO',games:144,dh:true,playoffs:'Wildcard‚ÜíKS simplified',teams:[{id:'kbo-ktw',name:'KT Wiz'}]},
  cpbl:{name:'CPBL',games:120,dh:true,playoffs:'Half-season simplified',teams:[{id:'cpbl-ctbc',name:'CTBC Brothers'}]}
};

const makeBatter=(tid)=>{const c=45+rand(0,45),p=35+rand(0,55),d=35+rand(0,55),s=35+rand(0,55);return{pid:rid(),name:rname(),team:tid,contact:c,power:p,disc:d,speed:s,bstats:{AB:0,H:0,R:0,RBI:0,BB:0,K:0,HR:0}};}
const makePitcher=(tid,role)=>{const st=45+rand(0,45),ctrl=35+rand(0,55),sta=role==='SP'?(70+rand(0,25)):(45+rand(0,35));const mix=['FF','SL','CH','CB','SI'].map(t=>({type:t,q:40+rand(0,41)}));return{pid:rid(),name:rname(),team:tid,role,stuff:st,control:ctrl,stamina:sta,fatigue:0,mix,pstats:{OUTS:0,H:0,R:0,BB:0,K:0,HR:0}};}
const rid=()=>Math.random().toString(36).slice(2,10);

function genTeam(t){const lineup=[];for(let i=0;i<9;i++) lineup.push(makeBatter(t.id));const sp=makePitcher(t.id,'SP');const pen=[makePitcher(t.id,'RP'),makePitcher(t.id,'RP'),makePitcher(t.id,'RP')];return{id:t.id,name:t.name,logo:ASSETS[t.id]||'/static/assets/logo_lad.svg',lineup,order:0,sp,pen,curPitcher:sp,stats:{W:0,L:0,R:0,H:0,E:0,LOB:0}};}

let S=null;

function view(v){['home','dash','game','roster','league','market'].forEach(x=>{const s=$(`view-${x}`); if(s) s.classList.add('hidden'); document.querySelectorAll(`.tab[data-view="${x}"]`).forEach(t=>t.classList.remove('active'));}); const sec=$(`view-${v}`); if(sec) sec.classList.remove('hidden'); document.querySelectorAll(`.tab[data-view="${v}"]`).forEach(t=>t.classList.add('active'));}

function populateLeagueInfo(){const lg=LEAGUES[$('leagueSel').value]; $('kGames').textContent=lg.games; $('kPlayoffs').textContent=lg.playoffs; $('kDH').textContent=lg.dh?'ÊòØ':'Âê¶'; $('kTeams').textContent=lg.teams.length; $('teamSel').innerHTML=lg.teams.map(t=>`<option value="${t.id}">${t.name}</option>`).join('');}

function startNew(){const lgid=$('leagueSel').value, lg=LEAGUES[lgid]; const teamId=$('teamSel').value; const nick=$('nick').value||'Player'; const mode=$('modeSel').value; const teams=lg.teams.map(t=>genTeam(t)); const my=teams.find(t=>t.id===teamId)||teams[0]; const opp=teams.find(t=>t.id!==my.id)||teams[0]; const sched=[]; const year=new Date().getFullYear(); for(let i=0;i<30;i++) sched.push({date:`${year}-04-${String(1+i).padStart(2,'0')}`,away:opp.id,home:my.id}); S={meta:{version:'v5',mode,lgid,nick,season:year},league:{id:lgid},teams:Object.fromEntries(teams.map(t=>[t.id,t])),me:my.id,schedule:sched,day:0,standings:Object.fromEntries(teams.map(t=>[t.id,{W:0,L:0}]))}; persist(); hydrateHeader(); renderDash(); view('dash');}

function persist(){localStorage.setItem(STORAGE,JSON.stringify(S));}
function load(){const s=localStorage.getItem(STORAGE); if(!s) return null; S=JSON.parse(s); return S;}
function hydrateHeader(){const game=S.schedule[S.day]; const my=S.teams[S.me]; $('brandLogo').src=my.logo; $('brandTitle').textContent=`${my.name} ‚Äî ${LEAGUES[S.league.id].name}`; $('brandSub').textContent=`Ê®°ÂºèÔºö${S.meta.mode.toUpperCase()} ‚Ä¢ ${S.meta.nick}`; $('logoAway').src=(game?S.teams[game.away].logo:my.logo); $('logoHome').src=(game?S.teams[game.home].logo:my.logo); $('nameAway').textContent=(game?S.teams[game.away].name:'ÂÆ¢Èöä'); $('nameHome').textContent=(game?S.teams[game.home].name:'‰∏ªÈöä');}

function renderDash(){const game=S.schedule[S.day]; const my=S.teams[S.me]; const rec=S.standings[S.me]; $('seasonLabel').textContent=S.meta.season; $('recordLabel').textContent=`${rec.W}-${rec.L}`; $('todayGame').textContent= game? `${S.teams[game.away].name} @ ${S.teams[game.home].name}ÔºàÁ¨¨ ${S.day+1} Â†¥Ôºâ` : 'Ë≥ΩÂ≠£Â∑≤ÁµêÊùü'; const tbody=$('standings').querySelector('tbody'); const rows=Object.values(S.teams).map(t=>({id:t.id,name:t.name,W:S.standings[t.id].W,L:S.standings[t.id].L})).sort((a,b)=>b.W-a.W).map(r=>`<tr><td>${r.name}</td><td>${r.W}</td><td>${r.L}</td><td>${(r.W/Math.max(1,r.W+r.L)).toFixed(3)}</td></tr>`).join(''); tbody.innerHTML=rows;}

function goGame(){const game=S.schedule[S.day]; if(!game) return; const away=S.teams[game.away], home=S.teams[game.home]; G={away,home,inning:1,half:'top',outs:0,balls:0,strikes:0,bases:[0,0,0],score:{away:0,home:0},innings:{away:[],home:[]},log:[],finished:false}; fillBox('boxAway',away.lineup); fillBox('boxHome',home.lineup); $('boxAwayName').textContent=away.name; $('boxHomeName').textContent=home.name; $('feed').innerHTML=''; renderGame(); view('game');}

let G=null; const curBatSide=()=>G.half==='top'?'away':'home'; const curPitSide=()=>G.half==='top'?'home':'away'; const curBatTeam=()=>G[curBatSide()]; const curPitTeam=()=>G[curPitSide()]; const curBatter=()=>curBatTeam().lineup[curBatTeam().order%9]; const curPitcher=()=>curPitTeam().curPitcher; function resetCount(){G.balls=0;G.strikes=0} function nextBatter(){curBatTeam().order=(curBatTeam().order+1)%9} function pushLog(m){const f=$('feed');const p=document.createElement('p');p.textContent=m;f.appendChild(p);f.scrollTop=f.scrollHeight;} function updateScorebug(){$('scoreAway').textContent=G.score.away;$('scoreHome').textContent=G.score.home;$('inningHalf').textContent=`${G.inning} ${G.half==='top'?'‰∏ä':'‰∏ã'}`;['b1','b2','b3'].forEach((id,i)=>$(id).classList.toggle('on',G.balls>i));['s1','s2'].forEach((id,i)=>$(id).classList.toggle('on',G.strikes>i));['o1','o2'].forEach((id,i)=>$(id).classList.toggle('on',G.outs>i));['base1','base2','base3'].forEach((id,i)=>$(id).classList.toggle('on',G.bases[i]==1));} function fillBox(id,lineup){const tb=$(id).querySelector('tbody');tb.innerHTML=lineup.map(b=>`<tr><td>${b.name}</td><td>${b.bstats.AB}</td><td>${b.bstats.H}</td><td>${b.bstats.R}</td><td>${b.bstats.RBI}</td><td>${b.bstats.BB}</td><td>${b.bstats.K}</td><td>${b.bstats.HR}</td></tr>`).join('');}
function endHalf(){const k=curBatSide();const arr=G.innings[k];const total=G.score[k];const prev=arr.reduce((a,b)=>a+b,0);arr.push(total-prev);G.outs=0;G.bases=[0,0,0];resetCount();G.half=G.half==='top'?'bot':'top'; if(G.half==='top') G.inning++; pushLog('‚Äî ÂçäÂ±ÄÁµêÊùü');}
function scoreRun(n){const k=curBatSide();G.score[k]+=n;} function advance(n){const b=G.bases;let runs=0;for(let i=0;i<n;i++){if(b[2]){scoreRun(1);b[2]=0;runs++;}if(b[1]){b[2]=1;b[1]=0;}if(b[0]){b[1]=1;b[0]=0;}}return runs;} function walk(){const b=G.bases;if(b[0]&&b[1]&&b[2])scoreRun(1); if(b[0]&&b[1]&&!b[2]) b[2]=1; if(b[0]&&!b[1]) b[1]=1; b[0]=1;}
function calcOutcome(){const bat=curBatter(), pit=curPitcher(), off=$('offTactic').value, pType=$('pitchType').value; if(off==='ibb') return {type:'BB'}; if(off==='bunt' && G.outs<2 && (G.bases[0]||G.bases[1])){ if(Math.random()<0.72) return {type:'SAC'}; else return {type:'FOUL'}; } if(off==='steal' && (G.bases[0]||G.bases[1])){ if(Math.random()<0.58) return {type:'STEAL_OK'}; else return {type:'STEAL_OUT'}; } const q=(pit.mix.find(x=>x.type===pType)?.q||60), effStuff=pit.stuff-Math.floor(pit.fatigue/12), effCtrl=pit.control-Math.floor(pit.fatigue/10); let pBall=.33-(effCtrl-60)/400+(bat.disc-60)/300, pStrike=.27+(effCtrl-60)/400-(bat.disc-60)/300, pFoul=.12+(bat.contact-60)/400, pInPlay=1-(pBall+pStrike+pFoul); pStrike+=(q-60)/300; pInPlay+=(effStuff-60)/500-(q-60)/600; pBall=clamp(pBall,0.05,0.6); pStrike=clamp(pStrike,0.1,0.6); pFoul=clamp(pFoul,0.05,0.4); pInPlay=clamp(pInPlay,0.05,0.6); const r=Math.random(); if(r<pBall) return {type:'BALL'}; if(r<pBall+pStrike) return {type:'STRIKE'}; if(r<pBall+pStrike+pFoul) return {type:'FOUL'}; const hitP=clamp(0.25+(bat.contact-60)/400+(bat.power-60)/500-(effStuff-60)/600,0.12,0.43), hrP=clamp(0.03+(bat.power-70)/300,0.005,0.12), xbP=clamp(0.09+(bat.power-60)/400,0.02,0.28); const hitRoll=Math.random(); if(hitRoll<hitP){ const t=Math.random(); if(t<hrP) return {type:'HR'}; if(Math.random()<xbP) return {type:(Math.random()<0.85?'2B':'3B')}; return {type:'1B'}; } return {type:'OUT'};}
function playOne(){ if(!G||G.finished) return; const o=calcOutcome(); const bat=curBatter(), pit=curPitcher(); if(o.type==='BALL'){G.balls++;pushLog('Â£ûÁêÉ'); if(G.balls>=4){walk();bat.bstats.BB++;pit.pstats.BB++;pushLog('‰øùÈÄÅ'); nextBatter(); resetCount();}} else if(o.type==='STRIKE'){G.strikes++;pushLog('Â•ΩÁêÉ'); if(G.strikes>=3){bat.bstats.K++;G.outs++;pushLog(`${bat.name} ‰∏âÊåØ`); nextBatter(); resetCount();}} else if(o.type==='FOUL'){ if(G.strikes<2) G.strikes++; pushLog('ÁïåÂ§ñÁêÉ'); } else if(o.type==='STEAL_OK'){ if(G.bases[0]&&!G.bases[1]){G.bases[0]=0;G.bases[1]=1;} else if(G.bases[1]&&!G.bases[2]){G.bases[2]=1;} pushLog('‚ö° ÁõúÂ£òÊàêÂäü'); } else if(o.type==='STEAL_OUT'){ if(G.bases[1]) G.bases[1]=0; else if(G.bases[0]) G.bases[0]=0; G.outs++; pushLog('üîí ÁõúÂ£òÂ§±Êïó'); } else if(o.type==='SAC'){ const moved=advance(1); G.outs++; pushLog('ÁäßÁâ≤Áü≠Êâì'); nextBatter(); } else if(o.type==='BB'){ walk(); bat.bstats.BB++; nextBatter(); } else if(o.type==='1B'){ const r=advance(1); G.bases[0]=1; bat.bstats.AB++; bat.bstats.H++; bat.bstats.RBI+=r; pushLog('‰∏ÄÂ£òÂÆâÊâì'); nextBatter(); } else if(o.type==='2B'){ const r=advance(2); G.bases[1]=1; G.bases[0]=0; bat.bstats.AB++; bat.bstats.H++; bat.bstats.RBI+=r; pushLog('‰∫åÂ£òÂÆâÊâì'); nextBatter(); } else if(o.type==='3B'){ const r=advance(3); G.bases[2]=1; G.bases[1]=0; G.bases[0]=0; bat.bstats.AB++; bat.bstats.H++; bat.bstats.RBI+=r; pushLog('‰∏âÂ£òÂÆâÊâì'); nextBatter(); } else if(o.type==='HR'){ const runs=1+G.bases[0]+G.bases[1]+G.bases[2]; G.bases=[0,0,0]; G.score[curBatSide()]+=runs; bat.bstats.AB++; bat.bstats.H++; bat.bstats.HR++; bat.bstats.R+=runs; bat.bstats.RBI+=(runs-1); pushLog(`üí• ${bat.name} ÂÖ®Â£òÊâìÔºÅ${runs} ÂàÜ`); nextBatter(); } else if(o.type==='OUT'){ G.outs++; bat.bstats.AB++; pushLog('Âá∫Â±Ä'); nextBatter(); } curPitcher().fatigue++; if(G.outs>=3){ endHalf(); } updateScorebug(); fillBox('boxAway',G.away.lineup); fillBox('boxHome',G.home.lineup); $('matchup').textContent=`${curPitcher().name} vs ${curBatter().name}  ÁêÉÊï∏ ${G.balls}-${G.strikes}`;}
function autoHalf(){let i=0; while(G&&G.outs<3&&i++<500) playOne();}
function autoGame(){let i=0; while(G&&G.inning<=12&&i++<6000){playOne();} if(G&&G.inning>12){finishGame();}}
function finishGame(){G.finished=true; ['away','home'].forEach(k=>{const arr=G.innings[k]; const total=G.score[k]; const prev=arr.reduce((a,b)=>a+b,0); if(total-prev!==0 || arr.length<G.inning) arr.push(total-prev); }); const game=S.schedule[S.day]; const winner=G.score.home>G.score.away?'home':(G.score.away>G.score.home?'away':null); if(winner==='home') S.standings[game.home].W++; else if(winner==='away') S.standings[game.away].W++; else {/* tie -> ignore */} if(winner!=='home') S.standings[game.home].L++; if(winner!=='away') S.standings[game.away].L++; S.day++; persist(); view('dash'); renderDash();}
function swapPitcher(){const t=curPitTeam(); const next=t.pen.shift(); if(!next) return alert('ÁâõÊ£öÁî®Áõ°'); t.pen.push(t.curPitcher); t.curPitcher=next; pushLog(`ÊèõÊäïÔºö${next.name}`);}
function renderGame(){ updateScorebug(); $('matchup').textContent=`${curPitcher().name} vs ${curBatter().name}`; }

window.addEventListener('load',()=>{
  document.querySelectorAll('.bottomnav .tab').forEach(t=>t.addEventListener('click',(e)=>{e.preventDefault(); view(t.dataset.view);}));
  $('leagueSel').addEventListener('change', populateLeagueInfo); populateLeagueInfo();
  $('startCareer').addEventListener('click', startNew); $('loadSave').addEventListener('click',()=>{ if(load()){ hydrateHeader(); renderDash(); view('dash'); } else alert('Ê≤íÊúâÂ≠òÊ™î'); });
  $('playToday').addEventListener('click', goGame); $('simToday').addEventListener('click',()=>{ goGame(); autoGame(); finishGame(); }); $('simToEnd').addEventListener('click',()=>{ while(S.day<S.schedule.length){ goGame(); autoGame(); finishGame(); } });
  $('pitch').addEventListener('click', playOne); $('autoHalf').addEventListener('click', autoHalf); $('autoGame').addEventListener('click', autoGame); $('swapPitcher').addEventListener('click', swapPitcher); $('leaveGame').addEventListener('click',()=>{ view('dash'); renderDash(); });
  if(load()){ hydrateHeader(); renderDash(); view('dash'); } else { view('home'); }
});
})();